<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Portfolio</title><link>https://umarbaev-s.github.io/portfolio/</link><description>Recent content on Portfolio</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 12 May 2019 12:14:34 +0600</lastBuildDate><atom:link href="https://umarbaev-s.github.io/portfolio/index.xml" rel="self" type="application/rss+xml"/><item><title>System Info visualizer</title><link>https://umarbaev-s.github.io/portfolio/si-vis-project/</link><pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate><guid>https://umarbaev-s.github.io/portfolio/si-vis-project/</guid><description>System Info visualizer (si-vis) in development
Simple system info visualizer written in Rust for educational purposes only
Dependency resolution eframe - official framework library for writing apps using egui, GUI library for Rust egui_dock - library provides docking(tabs) support for egui egui_extras - adds some features on top of egui, used for building table sysinfo - crate used to get a system&amp;rsquo;s information Code organization si_gui, contains GUI app drawing and updating parts si_data, stores and updates system info data Screenshots General system info tab CPU and its usage info tab Processes info table tab Future plans Change UI from egui to ratatui Reorganize app layout Add sorting based on columns in processes info table Display memory allocations in real-time when specific process is selected (inspired by mevi)</description></item><item><title>User Mode thread Scheduling</title><link>https://umarbaev-s.github.io/portfolio/aosv-ums-project/</link><pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate><guid>https://umarbaev-s.github.io/portfolio/aosv-ums-project/</guid><description>AOSV Final Project Report A.Y. 2020/2021
Introduction The goal of the project was to implement User Mode thread Scheduling mechanism for the Linux distribution, inspired by the User-mode scheduling (UMS) implementation available in the Windows kernel [1]. UMS is a mechanism that allows applications/programs in the user mode to schedule their own threads without involving the kernel/system scheduler. The main goal and advantage is that thread switching in user mode is &amp;ldquo;more efficient than thread pools for managing large numbers of short-duration work items that require few system calls.</description></item></channel></rss>